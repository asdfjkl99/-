- 이진 트리
정의 : 모든 노드가 최대 2개까지 child node들을 가질 수 있는 트리.

- 이진 탐색 트리
정의 : 트리의 모든 노드에 대해서 다음 특징을 만족하는 트리.
= 노드의 왼쪽 subtree 내의 모든 노드값들은 기준 노드보다 같거나 작고, 노드의 오른쪽 subtree 내의 모든 노드값들은 기준 노드보다 크다.
이진트리에서 트리의 height에서 최대 노드의 개수? : 2^(n+1) - 1
이진트리에서 노드의 개수를 n이라고 할 때, 트리의 height의 최소값? : n=2^h - h, h = log2n, 최대값? : n-1

1) Proper binary tree : child node의 개수가 0 또는 2인 경우
2) complete binary tree 
=> 조건 ① : 비어있는 level 이 존재 X
조건 ② : 오른쪽 child node가 있지만 왼쪽이 비어있으면 X
3) perfect binary tree : 모든 level의 노드가 모두 채워진 경우
Q) perfect binary tree에서 노드 수가 n이라고 하면, 이 트리의 height는?  A) log2(n+1) - 1

- tree traversal

preorder	 -|
inorder	 -| -> 재귀적으로 정의
postorder -|

preorder : <root><leftsubtree><rightsubtree>
inorder : <leftsubtree><root><rightsubtree>
postorder : <leftsubtree><rightsubtree><root> -> 노드 방문 순서 pattern에 따라
ex>
	 ⓕ
         ⓓ     ⓙ
      ⓑ  ⓔ ⓖ  ⓚ
   ⓐ  ⓒ  ⓘ
           ⓗ

[preorder] F->D->B->A->C->E->J->G->I->H->K
[inorder] 	A->B->C->D->E->F->G->H->I->J->K
* 이진 탐색 트리에서 inorder traversal을 하면 정렬 순서
[postorer] A->C->B->E->D->H->I->G->K->J->F

- Depth First Search (DFS) : 형제 자매 노드보다 child 노드 먼저 탐색

preorder	 -|
inorder	 -| -> 재귀적으로 정의
postorder -|

- Breadth First Search : child 노드 보다 형제 자매 노드 먼저 탐색/방문
F(Root)->D->J->B->E->G->K->A->C->I->H
